import java.util.NoSuchElementException;
/**
 * Your implementation of a non-circular DoublyLinkedList with a tail pointer.
 *
 * @author Qianyun Chen
 * @version 1.0
 * @userid qchen336
 * @GTID 903349275
 *
 * Collaborators: LIST ALL COLLABORATORS YOU WORKED WITH HERE
 *
 * Resources: LIST ALL NON-COURSE RESOURCES YOU CONSULTED HERE
 */
@SuppressWarnings("checkstyle:CommentsIndentation")
public class DoublyLinkedList<T> {

    // Do not add new instance variables or modify existing ones.
    private DoublyLinkedListNode<T> head;
    private DoublyLinkedListNode<T> tail;
    private int size;


    // Do not add a constructor.

    /**
     * Adds the element to the specified index.
     * <p>
     * Must be O(1) for indices 0 and size and O(n) for all other cases.
     *
     * @param index the index at which to add the new element
     * @param data  the data to add at the specified index
     * @throws java.lang.IndexOutOfBoundsException if index < 0 or index > size
     * @throws java.lang.IllegalArgumentException  if data is null
     */
    public void addAtIndex(int index, T data) {
        DoublyLinkedListNode<T> newNode = new DoublyLinkedListNode<T>(data);
        if (index < 0 || index > size) {
            throw new IndexOutOfBoundsException("Index cannot be "
                    + "negative or greater than the size");
        } else if (data == null) {
            throw new IllegalArgumentException("Data cannot be empty");
        } else if (head == null) {
            head = newNode;
            tail = newNode;
            size++;
        } else if (index == 0) {
            addToFront(data);
        } else if (index == size) {
            addToBack(data);
        } else {
            DoublyLinkedListNode<T> current = null;
            if (index <= size / 2) {
                current = head;
                for (int i = 1; i < index; i++) {
                    current = current.getNext();
                }
                newNode.setNext(current.getNext());
                current.setNext(newNode);
                newNode.setPrevious(current);
                newNode.getNext().setPrevious(newNode);
            } else {
                current = tail;
                for (int i = size - 1; i > index; i--) {
                    current = current.getPrevious();
                }
                newNode.setNext(current);
                newNode.setPrevious(current.getPrevious());
                current.getPrevious().setNext(newNode);
                current.setPrevious(newNode);
            }
            size++;
        }
    }




    /**
     * Adds the element to the front of the list.
     *
     * Must be O(1).
     *
     * @param data the data to add to the front of the list
     * @throws java.lang.IllegalArgumentException if data is null
     */
    public void addToFront(T data) {
        DoublyLinkedListNode<T> newNode = new DoublyLinkedListNode<T>(data);
        if (data == null) {
            throw new IllegalArgumentException("Data cannot be null");
        } else if (head == null) {
            head = newNode;
            tail = newNode;
        } else {
            newNode.setNext(head);
            head.setPrevious(newNode);
            head = newNode;
            head.setPrevious(null);
        }
        size++;
    }

    /**
     * Adds the element to the back of the list.
     *
     * Must be O(1).
     *
     * @param data the data to add to the back of the list
     * @throws java.lang.IllegalArgumentException if data is null
     */
    public void addToBack(T data) {
        DoublyLinkedListNode<T> newNode = new DoublyLinkedListNode<T>(data);
        if (data == null) {
            throw new IllegalArgumentException("Data cannot be null");
        } else if (head == null) {
            head = newNode;
            tail = newNode;
        } else {
            tail.setNext(newNode);
            newNode.setPrevious(tail);
            tail = newNode;
            tail.setNext(null);
        }
        size++;
    }

    /**
     * Removes and returns the element at the specified index.
     *
     * Must be O(1) for indices 0 and size - 1 and O(n) for all other cases.
     *
     * @param index the index of the element to remove
     * @return the data formerly located at the specified index
     * @throws java.lang.IndexOutOfBoundsException if index < 0 or index >= size
     */
    public T removeAtIndex(int index) {
        T data = null;
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException("Index cannot be negative "
                    + "and it can only be smaller than the size");
        } else if (head == null) {
            throw new NoSuchElementException("The list cannot be empty");
        } else if (size == 1) {
            data = head.getData();
            head = null;
            tail = null;
            size--;
        } else if (index == 0) {
            data = removeFromFront();
        } else if (index == size - 1) {
            data = removeFromBack();
        } else {
            DoublyLinkedListNode<T> current = null;
            if (index <= size / 2) {
                current = head;
                for (int i = 1; i < index; i++) {
                    current = current.getNext();
                }
                data = current.getNext().getData();
                current.setNext(current.getNext().getNext());
                current.getNext().setPrevious(current);
            } else {
                current = tail;
                for (int i = size - 1; i > index; i--) {
                    current = current.getPrevious();
                }
                data = current.getData();
                current.getPrevious().setNext(current.getNext());
                current.getNext().setPrevious(current.getPrevious());
            }
            size--;
        }
        return data;
    }

    /**
     * Removes and returns the first element of the list.
     *
     * Must be O(1).
     *
     * @return the data formerly located at the front of the list
     * @throws java.util.NoSuchElementException if the list is empty
     */
    public T removeFromFront() {
        T data = null;
        if (head == null) {
            throw new NoSuchElementException("The list cannot be empty");
        } else if (size == 1) {
            data = head.getData();
            head = null;
            tail = null;
        } else {
            data = head.getData();
            head = head.getNext();
            head.setPrevious(null);
        }
        size--;
        return data;
    }

    /**
     * Removes and returns the last element of the list.
     *
     * Must be O(1).
     *
     * @return the data formerly located at the back of the list
     * @throws java.util.NoSuchElementException if the list is empty
     */
    public T removeFromBack() {
        T data = null;
        if (tail == null) {
            throw new NoSuchElementException("The list cannot be empty");
        } else if (size == 1) {
            data = tail.getData();
            head = null;
            tail = null;
        } else {
            data = tail.getData();
            tail = tail.getPrevious();
            tail.setNext(null);
        }
        size--;
        return data;
    }

    /**
     * Returns the element at the specified index.
     *
     * Must be O(1) for indices 0 and size - 1 and O(n) for all other cases.
     *
     * @param index the index of the element to get
     * @return the data stored at the index in the list
     * @throws java.lang.IndexOutOfBoundsException if index < 0 or index >= size
     */
    public T get(int index) {
        T data = null;
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException("The index cannot be negative "
                    + "and it can only be smaller than the size");
        } else if (index == 0) {
            data = head.getData();
        } else if (index == size - 1) {
            data = tail.getData();
        } else {
            DoublyLinkedListNode<T> current = null;
            if (index <= size / 2) {
                current = head;
                for (int i = 0; i < index; i++) {
                    current = current.getNext();
                }
            } else {
                current = tail;
                for (int i = size - 1; i > index; i--) {
                    current = current.getPrevious();
                }
            }
            data = current.getData();
        }
        return data;
    }

    /**
     * Returns whether or not the list is empty.
     *
     * Must be O(1).
     *
     * @return true if empty, false otherwise
     */
    public boolean isEmpty() {
        return size == 0;
    }

    /**
     * Clears the list.
     *
     * Clears all data and resets the size.
     *
     * Must be O(1).
     */
    public void clear() {
        head = null;
        tail = null;
        size = 0;
    }

    /**
     * Removes and returns the last copy of the given data from the list.
     *
     * Do not return the same data that was passed in. Return the data that
     * was stored in the list.
     *
     * Must be O(1) if data is in the tail and O(n) for all other cases.
     *
     * @param data the data to be removed from the list
     * @return the data that was removed
     * @throws java.lang.IllegalArgumentException if data is null
     * @throws java.util.NoSuchElementException   if data is not found
     */
    public T removeLastOccurrence(T data) {
        T rMdata = null;
        if (data == null) {
            throw new IllegalArgumentException("The data cannot be null");
        } else if (head == null) {
            throw new NoSuchElementException("The data is "
                    + "not found in the list");
        } else if (size == 1) {
            if (head.getData() == data) {
                rMdata = removeFromFront();
            } else {
                throw new NoSuchElementException("The data is "
                        + "not found in the list");
            }
        } else {
            DoublyLinkedListNode<T> current = head;
            DoublyLinkedListNode<T> lastOcNode = null;
            while (current != null) {
                if (current.getData().equals(data)) {
                    lastOcNode = current;
                }
                current = current.getNext();
            }
            if (lastOcNode != null) {
                if (lastOcNode == head) {
                    rMdata = removeFromFront();
                } else if (lastOcNode == tail) {
                    rMdata = removeFromBack();
                } else {
                    rMdata = lastOcNode.getData();
                    lastOcNode.getPrevious().setNext(lastOcNode.getNext());
                    lastOcNode.getNext().setPrevious(lastOcNode.getPrevious());
                    size--;
                }
            } else {
                throw new NoSuchElementException("The data is "
                        + "not found in the list");
            }
        }
        return rMdata;
    }

    /**
     * Returns an array representation of the linked list.
     *
     * Must be O(n) for all cases.
     *
     * @return an array of length size holding all of the objects in the
     * list in the same order
     */
    public Object[] toArray() {
        Object[] result = new Object[size];
        if (isEmpty()) {
            result = new Object[0];
        } else {
            DoublyLinkedListNode<T> current = head;
            for (int i = 0; i < size; i++) {
                result[i] = current.getData();
                current = current.getNext();
            }
        }
        return result;
    }

    /**
     * Returns the head node of the list.
     *
     * For grading purposes only. You shouldn't need to use this method since
     * you have direct access to the variable.
     *
     * @return the node at the head of the list
     */
    public DoublyLinkedListNode<T> getHead() {
        // DO NOT MODIFY!
        return head;
    }

    /**
     * Returns the tail node of the list.
     *
     * For grading purposes only. You shouldn't need to use this method since
     * you have direct access to the variable.
     *
     * @return the node at the tail of the list
     */
    public DoublyLinkedListNode<T> getTail() {
        // DO NOT MODIFY!
        return tail;
    }

    /**
     * Returns the size of the list.
     *
     * For grading purposes only. You shouldn't need to use this method since
     * you have direct access to the variable.
     *
     * @return the size of the list
     */
    public int size() {
        // DO NOT MODIFY!
        return size;
    }
}
